// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         Int            @id @default(autoincrement())
  email      String         @unique
  username   String         @unique
  password   String
  avatar     String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt()
  posts      Post[]
  comments   Comment[]
  groups     Group[]
  likedPosts PostLike[]
  member     GroupMember[]
  requests   GroupRequest[]
}

model Post {
  id         Int        @id @default(autoincrement())
  title      String
  content    String
  published  Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt()
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   Int
  comments   Comment[]
  categories Category[]
  tags       Tag[]
  group      Group?     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId    Int?
  likes      PostLike[]
}

model PostLike {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
}

model Group {
  id          Int            @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt()
  owner       User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     Int
  posts       Post[]
  requests    GroupRequest[]
  members     GroupMember[]
}

model GroupRequest {
  id      Int          @id @default(autoincrement())
  status  String       @default("pending")
  group   Group        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId Int          @unique
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int          @unique
  member  GroupMember?
}

model GroupMember {
  id             Int          @id @default(autoincrement())
  group          Group        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId        Int
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  roles          GroupRole[]
  request        GroupRequest @relation(fields: [groupRequestId], references: [id], onDelete: Cascade)
  groupRequestId Int          @unique
}

model GroupRole {
  id      Int           @id @default(autoincrement())
  name    String
  members GroupMember[]
}
